# Copyright 2023 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: setup-tejolote
author: cpanato
description: 'Installs tejolote and includes it in your path'
branding:
  icon: 'package'
  color: 'blue'
# This is pinned to the last major release, we have to bump it for each action version.
inputs:
  tejolote-release:
    description: 'tejolote release version to be installed'
    required: false
    default: '0.4.2'
  install-dir:
    description: 'Where to install the tejolote binary'
    required: false
    default: '$HOME/.tejolote'
  use-sudo:
    description: 'set to true if install-dir location requires sudo privs'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
      with:
        install-dir: ${{ inputs.install-dir }}
        use-sudo: ${{ inputs.use-sudo }}
    - shell: bash
      run: |
        #!/bin/bash
        # tejolote install script
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        mkdir -p ${{ inputs.install-dir }}

        trap "popd >/dev/null" EXIT

        pushd ${{ inputs.install-dir }} > /dev/null
        tejolote_executable_name='tejolote'
        case ${{ runner.os }} in
          Linux)
            case ${{ runner.arch }} in
              X64)
                desired_tejolote_filename='tejolote-amd64-linux'
                ;;

              ARM)
                desired_tejolote_filename='tejolote-arm-linux'
                ;;

              ARM64)
                desired_tejolote_filename='tejolote-arm64-linux'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          macOS)
            case ${{ runner.arch }} in
              X64)
                desired_tejolote_filename='tejolote-amd64-darwin'
                ;;

              ARM64)
                desired_tejolote_filename='tejolote-arm64-darwin'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          Windows)
            case ${{ runner.arch }} in
              X64)
                desired_tejolote_filename='tejolote-amd64-windows.exe'
                tejolote_executable_name=tejolote.exe
                ;;
              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;
          *)
            log_error "unsupported architecture $arch"
            exit 1
            ;;
        esac

        SUDO=
        if "${{ inputs.use-sudo }}" == "true" && command -v sudo >/dev/null; then
          SUDO=sudo
        fi

        semver='^([0-9]+\.){0,2}(\*|[0-9]+)$'
        if [[ ${{ inputs.tejolote-release }} =~ $semver ]]; then
          log_info "Custom tejolote version '${{ inputs.tejolote-release }}' requested"
        else
          log_error "Unable to validate requested tejolote version: '${{ inputs.tejolote-release }}'"
          exit 1
        fi

        # Download custom tejolote
        log_info "Downloading platform-specific version '${{ inputs.tejolote-release }}' of tejolote...\n      https://github.com/kubernetes-sigs/tejolote/releases/download/v${{ inputs.tejolote-release }}/${desired_tejolote_filename}"
        $SUDO curl -sL https://github.com/kubernetes-sigs/tejolote/releases/download/v${{ inputs.tejolote-release }}/${desired_tejolote_filename} -o ${tejolote_executable_name}

        TEJOLOTE_CERT=https://github.com/kubernetes-sigs/tejolote/releases/download/v${{ inputs.tejolote-release }}/${desired_tejolote_filename}.pem
        TEJOLOTE_SIG=https://github.com/kubernetes-sigs/tejolote/releases/download/v${{ inputs.tejolote-release }}/${desired_tejolote_filename}.sig

        log_info "Using cosign to verify signature of desired tejolote version"
        cosign verify-blob --certificate $TEJOLOTE_CERT --signature $TEJOLOTE_SIG \
          --certificate-identity "https://github.com/kubernetes-sigs/tejolote/.github/workflows/release.yml@refs/tags/v${{ inputs.tejolote-release }}" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" ${tejolote_executable_name}
        retVal=$?
        if [[ $retVal -eq 0 ]]; then
          $SUDO chmod +x ${tejolote_executable_name}
          log_info "Installation complete!"
        else
          log_error "Unable to validate tejolote version: '${{ inputs.tejolote-release }}'"
          exit 1
        fi

    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: echo "${{ inputs.install-dir }}" >> $GITHUB_PATH
      shell: bash
    - if: ${{ runner.os == 'Windows' }}
      run: echo "${{ inputs.install-dir }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
