# Copyright 2023 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: publish-release
author: puerco
description: 'Runs publish release'
branding:
  icon: 'package'
  color: 'blue'

inputs:
  publish-release-version:
    description: 'publish-release version to be installed'
    required: false
    default: '0.18.0'
  install-only:
    description: "Only install publish-release binary"
    required: false
    default: 'false'
  install-dir:
    description: 'Where to install the publish-release binary'
    required: false
    default: '$HOME/.publish-release'
  use-sudo:
    description: 'set to true if install-dir location requires sudo privs'
    required: false
    default: 'false'
  assets:
    description: "Assets to upload to the release page (see readme)."
    required: false
  draft:
    description: "Mark the release as draft"
    required: false
    default: 'false'
  sbom:
    description: "Generate an SBOM from the code"
    required: false
    default: 'true'
  sbom_format:
    description: "format to use for the SBOM [json|tag-value]"
    required: false
    default: 'json'
  template:
    description: "Release template file"
    required: false
  name:
    description: "Name for the release"
    required: false

  # Consider --noupdate Fail if the release already exists
  # Consider -r, --repo repository slug containing the release page
  # --sbom-format string          format to use for the SBOM [json|tag-value] (default "json")
  # -s, --substitution strings        String substitution for the page template
  # --repo-path string            Path to the source code repository (default ".")
  # --release-notes-file string   Path to a release notes markdown file to include in the release

runs:
  using: "composite"
  steps:
    - uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0
      with:
        install-dir: ${{ inputs.install-dir }}
        use-sudo: ${{ inputs.use-sudo }}

    # if requested to install from go install
    - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      if: ${{ inputs.publish-release-version == 'main' }}
      with:
        go-version: '1.25'
        check-latest: true
        cache: false

    - shell: bash
      run: |
        #!/usr/bin/env bash
        # publish-release install script
        shopt -s expand_aliases
        if [ -z "$NO_COLOR" ]; then
          alias log_info="echo -e \"\033[1;32mINFO\033[0m:\""
          alias log_error="echo -e \"\033[1;31mERROR\033[0m:\""
        else
          alias log_info="echo \"INFO:\""
          alias log_error="echo \"ERROR:\""
        fi
        set -e

        mkdir -p ${{ inputs.install-dir }}

        if [[ ${{ inputs.publish-release-version }} == "main" ]]; then
          log_info "installing publish-release via 'go install' from its main version"
          GOBIN=$(go env GOPATH)/bin
          go install k8s.io/release/cmd/publish-release@master
          ln -s $GOBIN/publish-release ${{ inputs.install-dir}}/publish-release
          exit 0
        fi

        trap "popd >/dev/null" EXIT

        pushd ${{ inputs.install-dir }} > /dev/null
        publish_release_executable_name='publish-release'
        case ${{ runner.os }} in
          Linux)
            case ${{ runner.arch }} in
              X64)
                desired_publish_release_filename='publish-release-amd64-linux'
                ;;

              ARM64)
                desired_publish_release_filename='publish-release-arm64-linux'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          macOS)
            case ${{ runner.arch }} in
              X64)
                desired_publish_release_filename='publish-release-amd64-darwin'
                ;;

              ARM64)
                desired_publish_release_filename='publish-release-arm64-darwin'
                ;;

              *)
                log_error "unsupported architecture $arch"
                exit 1
                ;;
            esac
            ;;

          *)
            log_error "unsupported architecture $arch"
            exit 1
            ;;
        esac

        SUDO=
        if "${{ inputs.use-sudo }}" == "true" && command -v sudo >/dev/null; then
          SUDO=sudo
        fi

        semver='^([0-9]+\.){0,2}(\*|[0-9]+)$'
        if [[ ${{ inputs.publish-release-version }} =~ $semver ]]; then
          log_info "Custom publish-release version '${{ inputs.publish-release-version }}' requested"
        else
          log_error "Unable to validate requested publish-release version: '${{ inputs.publish-release-version }}'"
          exit 1
        fi

        # Download custom publish-release
        log_info "Downloading platform-specific version '${{ inputs.publish-release-version }}' of publish-release...\n      https://github.com/kubernetes/release/releases/download/v${{ inputs.publish-release-version }}/${desired_publish_release_filename}"
        $SUDO curl -sL https://github.com/kubernetes/release/releases/download/v${{ inputs.publish-release-version }}/${desired_publish_release_filename} -o ${publish_release_executable_name}

        PUBLISH_RELEASE_CERT=https://github.com/kubernetes/release/releases/download/v${{ inputs.publish-release-version }}/${desired_publish_release_filename}.pem
        PUBLISH_RELEASE_SIG=https://github.com/kubernetes/release/releases/download/v${{ inputs.publish-release-version }}/${desired_publish_release_filename}.sig

        log_info "Using cosign to verify signature of desired publish-release version"
        cosign verify-blob --certificate $PUBLISH_RELEASE_CERT --signature $PUBLISH_RELEASE_SIG \
          --certificate-identity "https://github.com/kubernetes/release/.github/workflows/release.yml@refs/tags/v${{ inputs.publish-release-version }}" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" ${publish_release_executable_name}
        retVal=$?
        if [[ $retVal -eq 0 ]]; then
          $SUDO chmod +x ${publish_release_executable_name}
          log_info "Installation complete!"
        else
          log_error "Unable to validate publish-release version: '${{ inputs.publish-release-version }}'"
          exit 1
        fi

    - if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: echo "${{ inputs.install-dir }}" >> $GITHUB_PATH
      shell: bash

    - if: ${{ inputs.install-only == 'true' }}
      run: |
        echo "Install only requested, installed!"
        exit 0
      shell: bash

    - shell: bash
      if: ${{ inputs.install-only == 'false' }}
      run: |
        #!/usr/bin/env bash

        draft=""
        if [[ "${{ inputs.draft }}" == true || "${{ inputs.draft }}" == "true" ]]; then
          draft="--draft"
        fi

        sbom="--sbom=false"
        if [[ "${{ inputs.sbom }}" == true || "${{ inputs.sbom }}" == "true" ]]; then
          sbom="--sbom=true --sbom-format="${{ inputs.sbom_format }}""
        fi

        IFS='|' read -r -a assets <<< "${{ inputs.assets }}";

        publish-release github \
          --repo="${{ github.repository }}" \
          --tag="${GITHUB_REF#refs/tags/}" --nomock ${draft} \
          --name="${{ inputs.name }}" \
          --template="${{ inputs.template }}" ${sbom} \
          $(if [ "${#assets[@]}" -ne 0 ]; then printf " --asset=\"%s\"" "${assets[@]}"; fi )
